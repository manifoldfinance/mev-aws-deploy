AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template creates an Application Load Balancer and a Launch
Configuration, as well as associated security groups, for a Geth node cluster.'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: |
      must be the VPC Id of an existing Virtual Private Cloud.
  CertificateARN:
    Type: String
    Description: (Optional) SSL certificate ARN
    ConstraintDescription: |
      must be a valid and issued SSL certificate managed by ACM
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: |
      must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be
      residing in the selected Virtual Private Cloud.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: i3.large
    AllowedValues:
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - c5.large
    - c5d.xlarge
    - c5d.2xlarge
    - c5d.4xlarge
    - c5d.9xlarge
    - c5d.18xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  InfuraProjectID:
    Description: (Optional) Infura Project ID via your Infura Dashboard
    ConstraintDescription: must be a valid string
    Type: String
  KeyName:
    Description: |
      Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Conditions:
  IsSSL:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: CertificateARN
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-759bc50a
    us-west-1:
      HVM64: ami-4aa04129
    ap-northeast-1:
      HVM64: ami-940cdceb
    sa-east-1:
      HVM64: ami-8eecc9e2
    ap-southeast-1:
      HVM64: ami-51a7aa2d
    ca-central-1:
      HVM64: ami-db9e1cbf
    ap-south-1:
      HVM64: ami-188fba77
    eu-central-1:
      HVM64: ami-de8fb135
    eu-west-1:
      HVM64: ami-2a7d75c0
    cn-north-1:
      HVM64: ami-b117c9dc
    cn-northwest-1:
      HVM64: ami-39b8ac5b
    us-gov-west-1:
      HVM64: ami-0661f767
    ap-northeast-2:
      HVM64: ami-467acf28
    ap-southeast-2:
      HVM64: ami-47c21a25
    us-west-2:
      HVM64: ami-ba602bc2
    us-east-2:
      HVM64: ami-5e8bb23b
    eu-west-2:
      HVM64: ami-6b3fd60c
    ap-northeast-3:
      HVM64: ami-85b3bdf8
    eu-west-3:
      HVM64: ami-20ee5e5d
Resources:
  GethServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: ALBTargetGroup
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install the required files and programs
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              awscli: []
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - HVM64
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          write_files:
            - path: /etc/systemd/system/geth.service
              content: |
                  [Unit]
                  Description=Ethereum Go Client
                  After=network.target

                  [Service]
                  Type=simple
                  User=ubuntu
                  Group=ubuntu
                  Restart=always
                  RestartSec=3
                  ExecStart=/usr/bin/geth \
                    --cache 4096 \
                    --datadir /mnt \
                    --maxpeers 50 \
                    --rpc \
                    --rpcaddr 0.0.0.0 \
                    --rpcport "8545" \
                    --rpcvhosts "*" \
                    --rpccorsdomain "*" \
                    --verbosity 3

                  [Install]
                  WantedBy=default.target
            - path: /etc/systemd/system/healthcheck.service
              content: |
                [Unit]
                Description=Healthcheck for the Ethereum client
                After=geth.service

                [Service]
                Type=simple
                User=ubuntu
                Group=ubuntu
                Restart=always
                RestartSec=3
                ExecStart=/usr/bin/node /home/ubuntu/healthcheck/index.js

                [Install]
                WantedBy=default.target
            - path: /home/ubuntu/healthcheck/package.json
              content: |
                {
                  "name": "healthcheck",
                  "version": "1.0.0",
                  "description": "The healthchecks for the geth node",
                  "main": "index.js",
                  "scripts": {
                    "test": "echo \"Error: no test specified\" && exit 1"
                  },
                  "author": "Adam Link",
                  "license": "ISC",
                  "dependencies": {
                    "express": "^4.16.3",
                    "lodash": "^4.17.10",
                    "request": "^2.85.0"
                  }
                }
            - path: /home/ubuntu/healthcheck/index.js
              content: |
                  var express = require('express');
                  var request = require('request');
                  var _ = require('lodash');
                  var app = express();

                  var etherscan_url = "https://api.etherscan.io/api?module=proxy&action=eth_blockNumber";
                  var infura_url = "https://mainnet.infura.io/v3/${InfuraProjectID}";

                  app.get('/healthcheck', function (req, res) {
                    request.get(etherscan_url, {timeout: 1500}, (e, r, body) => {
                      try {
                          var etherscanBlock = parseInt(JSON.parse(body)["result"],16);
                      } catch(error) {
                          var etherscanBlock = 0;
                      }
                      var jsonRPC = {"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber","params": []}
                      var options = { method: 'POST', json: jsonRPC }
                      request.post(_.merge(options, {uri: infura_url}), (e,r,body) => {
                        if(_.isEmpty(body)) { return res.sendStatus(598); }
                        if (!_.has(body, "result")) { return res.sendStatus(598); }
                        var infuraBlock = parseInt(body["result"],16);
                        request.post(_.merge(options, {uri: "http://localhost:8545"}), (e,r,body) => {
                          if(_.isEmpty(body)) { return res.sendStatus(598); }
                          if (!_.has(body, "result")) { return res.sendStatus(598); }
                          var ourBlock = parseInt(body["result"],16);
                          if (Math.abs(ourBlock - infuraBlock) < 10 || Math.abs(ourBlock - etherscanBlock) < 10) {
                            res.status(200).send({ ourBlock: ourBlock, infuraBlock: infuraBlock, etherscanBlock: etherscanBlock })
                          } else { res.sendStatus(503); }
                        })
                      })
                    })
                  })

                  app.listen(3000, function () { console.log('Healthcheck listening on port 3000!'); });
            - path: /etc/crontab
              content: |
                  */5 * * * * root /usr/bin/prlimit -n150000 -p $(pidof geth)
          runcmd:
            - export TERM=xterm
            - apt-get install software-properties-common -y
            - add-apt-repository -y ppa:ethereum/ethereum
            - echo "console-setup   console-setup/charmap47 select  UTF-8" > encoding.conf
            - debconf-set-selections encoding.conf
            - rm encoding.conf
            - apt-get update && apt-get upgrade -y
            - apt-get install ethereum -y
            - curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
            - apt-get -f install -y
            - apt-get install -y nodejs
            - cd /home/ubuntu/healthcheck && npm install
            - wget -q --output-document whereami https://raw.githubusercontent.com/rhyeal/whereami/master/whereami && chmod a+x whereami && sudo mv whereami /usr/bin/whereami
            - chown -R ubuntu:ubuntu /home/ubuntu
            - mkfs -t ext4 /dev/nvme0n1
            - mkdir /mnt
            - mount /dev/nvme0n1 /mnt
            - chown -R ubuntu:ubuntu /mnt
            - systemctl enable geth.service
            - systemctl enable healthcheck.service
            - systemctl daemon-reload
            - systemctl start geth.service
            - systemctl start healthcheck.service
            - apt-get install python-pip -y
            - pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - cfn-init --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region}
            - cfn-signal -e 0 --stack ${AWS::StackName} --resource GethServerGroup --region ${AWS::Region}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        Ref: Subnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: !If [IsSSL, 443, 80]
      Protocol: !If [IsSSL, HTTPS, HTTP]
      Certificates:
        - CertificateArn: !If [IsSSL, !Ref CertificateARN, !Ref "AWS::NoValue"]
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/healthcheck'
      HealthCheckPort: 3000
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 8545
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VpcId
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Load Balancer access to the nodes
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '30303'
        ToPort: '30303'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '30303'
        ToPort: '30303'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '8545'
        ToPort: '8545'
        SourceSecurityGroupId:
          Ref: "LoadBalancerSecurityGroup"
      VpcId:
        Ref: VpcId
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(S) access on the load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !If [IsSSL, 443, 80]
        ToPort: !If [IsSSL, 443, 80]
        CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId
Outputs:
  LoadBalancerURL:
    Description: URL of the Geth nodes
    Value:
      Fn::Join:
      - ''
      - - http
        - !If [IsSSL, s, '']
        - ://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
  CurlThis:
    Description: |
      Execute this curl command via a CLI to see your new nodes syncing
    Value:
      "Fn::Sub":
        - |
          curl -X POST
          ${PROTOCOL}://${URL}
          -H 'Content-Type: application/json'
          -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -k
        - {
            PROTOCOL: !If [IsSSL, https, http],
            URL: !GetAtt [ ApplicationLoadBalancer, DNSName ],
          }
